var core_1 = require("@angular/core");
var _1 = require("./../");
var elementRegistry = require('nativescript-angular/element-registry');
var di_1 = require('@angular/core/src/di');
var observable_array_1 = require('data/observable-array');
var collection_1 = require('@angular/common/src/facade/collection');
var RadCalendarComponent = (function () {
    function RadCalendarComponent(_elementRef, _iterableDiffers, _cdr) {
        this._elementRef = _elementRef;
        this._iterableDiffers = _iterableDiffers;
        this._cdr = _cdr;
        this.doCheckDelay = 5;
        this._nativeCalendar = _elementRef.nativeElement;
    }
    Object.defineProperty(RadCalendarComponent.prototype, "eventSource", {
        set: function (value) {
            this._eventSource = value;
            var needDiffer = true;
            if (value instanceof observable_array_1.ObservableArray) {
                needDiffer = false;
            }
            if (needDiffer && !this._differ && collection_1.isListLikeIterable(value)) {
                this._differ = this._iterableDiffers.find(this._eventSource).create(this._cdr, function (index, item) { return item; });
            }
            this._nativeCalendar.eventSource = this._eventSource;
        },
        enumerable: true,
        configurable: true
    });
    RadCalendarComponent.prototype.ngDoCheck = function () {
        var _this = this;
        if (this.timerId) {
            clearTimeout(this.timerId);
        }
        this.timerId = setTimeout(function () {
            clearTimeout(_this.timerId);
            if (_this._differ) {
                var changes = _this._differ.diff(_this._eventSource);
                if (changes) {
                    _this._nativeCalendar.reload();
                }
            }
        }, this.doCheckDelay);
    };
    RadCalendarComponent = __decorate([
        core_1.Component({
            selector: 'RadCalendar',
            template: '',
            inputs: ['eventSource']
        }),
        __param(0, core_1.Inject(core_1.ElementRef)),
        __param(1, core_1.Inject(core_1.IterableDiffers)),
        __param(2, core_1.Inject(core_1.ChangeDetectorRef))
    ], RadCalendarComponent);
    return RadCalendarComponent;
}());
exports.RadCalendarComponent = RadCalendarComponent;
exports.CALENDAR_DIRECTIVES = [RadCalendarComponent];
exports.CALENDAR_PROVIDERS = [di_1.provide(core_1.PLATFORM_DIRECTIVES, { useValue: exports.CALENDAR_DIRECTIVES, multi: true })];
elementRegistry.registerElement("RadCalendar", function () { return _1.RadCalendar; });
